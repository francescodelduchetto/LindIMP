<?xml version="1.0"?>
<launch>
  <arg name="with_chest_xtion" default="false"/>
  <arg name="chest_xtion_name" default="chest_xtion"/>
  <arg name="chest_xtion_machine" default="localhost"/>
  <arg name="chest_xtion_user" default=""/>

  <arg name="map"/>
  <arg name="with_no_go_map" default="false"/>
  <arg name="no_go_map" default="bla"/>
  <arg name="with_mux" default="false" />
  <arg name="topological_map"/>
  <!--<arg name="mon_nav_config_file" default="$(find strands_recovery_behaviours)/config/monitored_nav_config.yaml"/>-->
  <arg name="mon_nav_config_file" default=""/>
  <arg name="z_stair_threshold" default="0.12"/>
  <arg name="z_obstacle_threshold" default="0.15"/>
  <arg name="with_head_xtion" default="false"/>
  <arg name="with_human_aware" default="true"/>

  <arg name="with_site_movebase_params" default="false"/>
  <arg name="site_movebase_params" default=""/>

  <arg name="subsample_resolution" default="0.05"/>
  <arg name="subsample_min_points" default="5"/>
  <arg name="subsample_skip_points" default="20"/>

  <!-- WARNING: This EBC will be powerded on and off during docking! -->
  <arg name="lightEBC" default=""/>
  <arg name="positionUpdate" default="false"/>

  <arg name="machine" default="localhost" />
  <arg name="user" default="" />

  <!-- NOW when launching in a remote mode it will need the ROS_ENV_LOADER set if not it will leave it empty -->
  <machine name="$(arg machine)" address="$(arg machine)" env-loader="$(optenv ROS_ENV_LOADER )" user="$(arg user)" default="true" />

    <!-- lanch map server -->
    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map)"/>

    <!-- lanch no-go map server -->
    <node name="no_go_map_server" pkg="map_server" type="map_server" args="$(arg no_go_map)" if="$(arg with_no_go_map)">
        <remap from="/map" to="/no_go_map"/>
    </node>
    <node name="no_go_map_server" pkg="map_server" type="map_server" args="$(arg map)" unless="$(arg with_no_go_map)">
        <remap from="/map" to="/no_go_map"/>
    </node>

  <node pkg="thin_navigation" type="thin_localizer_node" name="thin_localizer" output="screen">
<param name="use_gui" value="false"/>
  <param name="initial_pose_x" value="-10.016"/>
  <param name="initial_pose_y" value="-14.027"/>
  <param name="initial_pose_theta" value="2.763"/>  
  <param name="global_frame_id" value="map"/>
  <param name="base_frame_id" value="base_link"/>
  <param name="odom_frame_id" value="odom"/>
  <param name="laser_topic" value="scan"/>
</node>

    <!-- Run the motion planning node -->
    <node pkg="thin_navigation" type="thin_planner_node" name="thin_planner" output="screen">
	<param name="Ktv" value="1.0"/>
      	<param name="Krv" value="1.0"/>      	
	<param name="repulsive_t_scale" value="0.1"/>
      	<param name="repulsive_r_scale" value="0.0"/>
	<param name="max_tv" value="0.5"/>
	<param name="max_rv" value="0.5"/>
	<param name="max_t_acc" value="0.1"/>
	<param name="max_r_acc" value="0.3"/>
	<param name="min_attractor_distance" value="0.16"/>
	<param name="max_attractor_distance" value="5.3"/>
	<param name="robot_radius" value="0.3"/>
      	<param name="safety_threshold" value="0.3"/>
	<param name="distance_cost_factor" value="0.5"/>
	<param name="distance_threshold" value="2.0"/>
	<param name="local_map_dimension" value="6.0" />
      	<param name="persistency" value="300" />
	<param name="goal_tolerance_t" value="0.2" />
      	<param name="goal_tolerance_r" value="0.14" />
      	<param name="forced_max_range" value="5.0"/>
	<param name="squared_endpoint_distance" value="0.01" />
      	<param name="wait_cicle" value="100" />	
	<param name="publish_global_plan" value="false"/>
      	<param name="global_frame_id" value="map"/>
      	<param name="base_frame_id" value="base_link"/>
      	<param name="laser_topic" value="scan"/>
      	<param name="command_vel_topic" value="cmd_vel"/>
      	<param name="use_gui" value="false"/>
   </node>
  <!-- Door passing and door checking servers
  <include file="$(find door_pass)/launch/door_passing.launch"/ -->


  <!--- Topological Navigation (includes monitored_navigation)
  <include file="$(find topological_navigation)/launch/topological_navigation.launch">
    <arg name="machine"  value="$(arg machine)"/>
    <arg name="user"  value="$(arg user)"/>
    <arg name="map" value="$(arg topological_map)"/>
    <arg name="mon_nav_config_file" value="$(arg mon_nav_config_file)"/>
  </include>
 -->
  <node name="odometry_mileage" pkg="odometry_mileage" type="odometry_mileage"/>

  <group if="$(arg with_human_aware)">
    <node name="gaze_at_pose" pkg="strands_gazing" type="gaze_at_pose"/>
    <node name="pose_extractor" pkg="pose_extractor" type="extract_last_pose_from_path.py"/>
    <include file="$(find strands_human_aware_navigation)/launch/human_aware_navigation.launch">
      <arg name="machine"  value="$(arg machine)"/>
      <arg name="user"  value="$(arg user)"/>
      <arg name="timeout" value="0.0"/>
      <arg name="max_dist" value="1.0"/>
      <arg name="min_dist" value="0.0"/>
      <arg name="detection_angle" value="0.1"/>
      <arg name="gaze_type" value="0"/>
    </include>
  </group>
</launch>
